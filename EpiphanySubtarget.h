//==-- EpiphanySubtarget.h - Define Subtarget for the Epiphany ---*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Epiphany specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_EPIPHANY_SUBTARGET_H
#define LLVM_TARGET_EPIPHANY_SUBTARGET_H

#include "EpiphanyFrameLowering.h"
#include "EpiphanyISelLowering.h"
#include "EpiphanyInstrInfo.h"
#include "EpiphanyRegisterInfo.h"
#include "llvm/ADT/Triple.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetFrameLowering.h"
#include "llvm/Target/TargetSelectionDAGInfo.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "EpiphanyGenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class GlobalValue;

class EpiphanySubtarget : public EpiphanyGenSubtargetInfo {
protected:
  EpiphanyFrameLowering      FrameLowering;
  EpiphanyInstrInfo          InstrInfo;
  EpiphanyTargetLowering     TLInfo;
  TargetSelectionDAGInfo     TSInfo;
  Triple TargetTriple;
  
private:
  EpiphanySubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);
public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  EpiphanySubtarget(const Triple &TT, const std::string &CPU, 
                    const std::string &FS, const TargetMachine &TM);
                    
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool GVIsIndirectSymbol(const GlobalValue *GV, Reloc::Model RelocM) const;
  
  const EpiphanyInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const EpiphanyFrameLowering *getFrameLowering() const override { return &FrameLowering; }

  const EpiphanyTargetLowering *getTargetLowering() const override { return &TLInfo; }

  const TargetRegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }

  TargetPassConfig *createPassConfig(PassManagerBase &PM);

  bool isTargetELF() const { return TargetTriple.isOSBinFormatELF(); }

  bool isTargetLinux() const { return TargetTriple.isOSLinux(); }

};
} // End llvm namespace

#endif  // LLVM_TARGET_EPIPHANY_SUBTARGET_H
